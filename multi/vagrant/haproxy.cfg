# http://haproxy.1wt.eu/download/1.4/doc/configuration.txt

global
    log         127.0.0.1 local2
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

defaults
    #http or tcp
    mode                    http
    #Use the log from global
    log                     global
    #more verbose log format
    option                  httplog
    #Enable HTTP connection closing on the server side (Still allows keep alives) 
    option http-server-close
    #Add the X-Forward header
    option forwardfor       except 127.0.0.0/8
    #When using a cookie allows you to break your session from a dead server
    option                  redispatch
    #In case of multiple connection failures try another server
    retries                 3

    #Remember we have sat connections comming from the antartic
    timeout http-request    2m
    timeout queue           5m
    timeout connect         10s 
    timeout client          2m
    timeout server          2m
    timeout http-keep-alive 2m 
    timeout check           10s
    maxconn                 3000

    # Enable the statistics page
    stats enable
    stats uri     /haproxy
    stats realm   Haproxy\ Statistics
    #stats auth    admin:yourpasswordhere
    stats refresh 5s

listen apache 0.0.0.0:80
    balance  roundrobin
    # Check the health or it will always be online
    # cookie: Set a cookie so the browser always redirects the browser to the same server.
    #cookie SRVNAME insert

    server  web01 web01.dev.bom.gov.au:80 check #cookie web01 
    server  web02 web02.dev.bom.gov.au:80 check #cookie web02 

    # Create a monitorable URI which returns a 200 if at least 1 server is up.
    # This could be used by Traverse/Nagios to detect if a whole server set is down.
    acl servers_down nbsrv(apache) lt 1
    monitor-uri /haproxy?apache_monitor
    monitor fail if
